$grid-columns: 12;
$gutter-width: 1rem;
$outer-margin: 2rem;
$gutter-compensation: ($gutter-width * 0.5) * -1;

$xs: 20rem;
$sm: 48rem;
$md: 64rem;
$lg: 80rem;
$xl: 90rem;

$breakpoints:
  xs $xs,
  sm $sm,
  md $md,
  lg $lg,
  xl $xl;

@mixin flexgrid($name) {
  [class*="col-#{$name}-"] {
    box-sizing: border-box;
    flex: 0 0 auto;
    padding-right: $gutter-compensation;
    padding-left: $gutter-compensation;
  }

  @for $i from 1 through $grid-columns {
    .col-#{$name}-#{$i} {
      flex-basis: 100% / $grid-columns * $i;
      max-width: 100% / $grid-columns * $i;
    }
  }

  @for $i from 1 through $grid-columns {
    .col-#{$name}-offset-#{$i} {
      margin-left: 100% / $grid-columns * $i
    }
  }

  .col-#{$name} {
    flex-grow: 1;
    flex-basis: 0;
    max-width: 100%;
  }

  .start-#{$name} {
    justify-content: flex-start;
    text-align: start;
  }

  .center-#{$name} {
    justify-content: center;
    text-align: center;
  }

  .end-#{$name} {
    justify-content: flex-end;
    text-align: end;
  }

  .top-#{$name} {
    align-items: flex-start;
  }

  .middle-#{$name} {
    align-items: center;
  }

  .bottom-#{$name} {
    align-items: flex-end;
  }

  .around-#{$name} {
    justify-content: space-around;
  }

  .between-#{$name} {
    justify-content: space-between;
  }

  .first-#{$name} {
    order: -1;
  }

  .last-#{$name} {
    order: 1;
  }
}

.container-fluid {
  margin-right: auto;
  margin-left: auto;
  padding-right: $outer-margin;
  padding-left: $outer-margin;
}

.row {
  box-sizing: border-box;
  display: flex;
  flex: 0 1 auto;
  flex-direction: row;
  flex-wrap: wrap;
  margin-right: $gutter-compensation;
  margin-left: $gutter-compensation;
}

.row.reverse {
  flex-direction: row-reverse;
}

.col.reverse {
  flex-direction: column-reverse;
}

@each $breakpoint in $breakpoints {
  $name: nth($breakpoint, 1);
  $size: nth($breakpoint, 2);

  @include break($size) {
    @include flexgrid($name);
  }
}
